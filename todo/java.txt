Chargement des fichiers devenu merdique, à la suite de l'insertion du paramètre mark ? ou tooltip ?
Inondations en 50 merde (n'affiche plus rien ?)

TOOLTIPS

- Tooltip dans les fichiers de figures (paramètre string global), qui apparaîssent dans le modèle et les récents
- Paramètre global tooltip

- Tester : ajouter des indicateurs dans mon code pour les touches pressées...
  mouseReleased pas fait pour Alt's !!!
--> KO JM + Modèles +          +Shift -> chargement des styles et d'une nouvelle figure (ça fait merder ensuite les autres chargements)
--> KO JM + Modèles +Ctrl      +Shift -> chargement des styles et d'une nouvelle figure
--> KO      Modèles +          +Shift -> chargement des styles et d'une nouvelle figure
--> KO     Récentes                   -> chargement des figures (qui fait de l'import, en fait)
--> KO     Récentes +Ctrl +Alt +Shift -> import de figures (qui fait de l'import de siteswap, si le fichier était du siteswap) 

--

- L'absence de fichier d'image fait planter l'appli. Il faudrait tester l'existence de chaque fichier avant ouverture !

- classes :
	PatternsManager : --> attributs, styles et figures
	                  --> PatternsFileManager
	PatternsFileManager : --> attributs communs aux fichiers
	                      --> doParsePatternsFile qui instancie un objet de la classe abstraite PatternsFileParser
	abstract PatternsFileParser : --> abstract doParsePatternsFile
	                              --> méthodes communes de parsing (découpage de paramètres, parsing de siteswap)
	                              --> se dérive en JMFileParser ou JMPFileParser ou JAPFileParser 
	                                               --> méthodes privées propres au format
- Mémoriser la valeur 'user' : boolean devient Boolean, byte devient Byte, et la valeur null équivaut à celle par défaut		

- Paramètres : partir de duNombre.jmp pour remettre en forme (* pour ce qui s'applique à local)
  
  ==> Panier de valeurs, avec des méthodes pour savoir si j'ai du global/local, du true/false :
      chaque valeur serait composée de tous les types possibles :
      bol : Bol à TRUE, FALSE ou null
      byt : Byte à val ou null
      str : String à val ou null
      usr : Bol à TRUE, FALSE ou null (mais s'applique à tout par défaut, et aux valeurs renseignées sinon)
      g/l : Bol à TRUE, FALSE ou null
      day/night : Bol à TRUE, FALSE ou null
  Attention : distinguer les types d'imports ! jm (jm), jmp (jm + jmp) et jap (jap)    
  
  Syntaxe JM :
  ';' Comment.
  '#' Set the parameter.
  '/' Separator(Green color).
  '%' Name of the style (30 characters or less) with style data,
      or call the registered style.
  #GA = 9.8	    ;Gravity (0<f<=98) [meter/second^2]
  #DR = 0.50	;Dwell ratio (0.10<=f<=0.90)
  #HR = 0.20	;Height (0.01<=f<=1.00) [meter]
  #SP = 1.0	    ;Speed ratio (0.1<=f<=2.0)
  #BC = 000	    ;Background color  Red Green Blue (0<=R,G,B<=F)
  #BP = 1		;Beep ON (n=0,1)
  #HD = 1		;Hand ON (n=0,1)
  #PD = 1		;Pattern ON (n=0,1)
  #MR = 0		;Switch right and left (n=0,1)

  Syntaxe JMP :
  //, # : file comment
  / : list comment
  /[] : shortcut
    %style - pas de contrainte
  £skill - 
  *mark
    :colors
    ~trail
    ^height
    @dwell
  &fluidity
  $[+|-]<speed>[%|×]
  >defaults
  ¤strobe
  speed=[+|-]n% true false global local user
  height=value user local global
  dwell=value[%] user local global
  fluidity=value user true false local global
  mirror=true false local global user
  colors=value random alternate /alternateRatio current true false local global user
  start=true false
  edition=true false global local
  fx=true false global local user
  strobe=robot flash value true false local global user
  skill=value user
  mark=value user
  title=Titre
  pattern=true false av [start mirror reverse edition fx strobe robot flash] <skill level> 
          <£skill> 
          <mark val> <*val> 
          <strobe val> <§val> 
          <speed val> <×speed> <$speed> 
          <height val> <^height> 
          <dwell val> 
          <@dwell> <fluidity val> 
          <&fluidity> local/global user 
  balls=true false +av [colors siteswap current random alternate] <0..50> trail <colors sequence> ou :<seq> <alternate value> local/global user
  log=notice warning error local/global user
  sounds=true false +av [metronome catch throw] local/global user
  background=day night <000..FFF> <000000..FFFFFF> (ou BC=<col>) local/global user
  juggler=true false +av [trail] phantom hands arms head visible day night <000..FFF> <000000..FFFFFF> local/global user
  siteswap=true false +av [balls reverse] day night <000..FFF> <000000..FFFFFF> (pas de chaîne siteswap) local/global user 
  style=true false +av [reverse defaults random] ou local/global user


- getReverseColorsString dans JSiteswap à réécrire ! De même que le getReverseStyle (mais ça, ça attendra l'introduction de la 4° coordonnée...)

- Arrêt de la capture vidéo n'arrête pas le son de la capture : 
  en fait, ça merde pas mal, surtout que ça fait le son si je conserve le bouton de la souris enfoncé sur le bouton de fermeture de l'appli !

- Paramétrer la transparence du jongleur : paramètre global

- Réactiver windowAdjustmentJButton dans DataJFrame

- Changement de langue ne recharge pas liens, videos et records avec les données de cette nouvelle langue

- Encercler les lignes du panneau des contrôles en mettant en valeur les topics (recadrer)

- Modification des couleurs de balles en pause ne change pas les balles dessinées... S'inspirer des ballsCheckbox

- Balance des throws mauvaise (essuie glaces)

- "(4,[42]) (2,4) ([24],4) (4,2) " pas starrable... Comparaison erronée entre multiplex ? 

- Lorsque je modifie le siteswap, la figure se relance mais le focus disparaît du siteswap (pour aller sur la liste) : KeyboardFocusManager.getFocusOwner()

- Passage de full Trail (balls) à 50 n'efface pas les trails ! --> Problème certainement lié au ralentissement en mode Trail,
  ralentissement qui perdure ensuite !

- Yeux : faire 4 demi-ellipses, plutôt : x²/a² + y²/b² = 1 ==> x = a × cos t, y = b × sin t. Le drawArc(x,y,w,h,beg,end) trace l'arc dont le centre est au centre du rect.
  Donc il faut d'abord définir ce centre... Faire une ellipse pour la tête !!!

- Sons screenShot et screenPlay (+ throw : tir d'artifice ?) : régler les volumes et les sons 

- Paramètre relativeSpeed qui permet de ralentir ou accélérer la vitesse pour la figure en cours (sans modifier la valeur de la scrollbar) :
  à tester, et à parser !

- 5 langues (param lang ne prend pas le dessus) + date de dernière mise à jour sur la page d'accueil & version !!!

- Changer 'user' par 'default'

- Langue par défaut à activer pour la version !


VERSION !!!

 
- Ralentissement de l'anim en mode full trail des balles...

- Problème de TEXTFIELD DES COULEURS (réduit) : voir ScrollPaneLayout ?
jScrollPane.getRowHeader()    ou jScrollPane.setRowHeader(null) 
jScrollPane.getColumnHeader() ou jScrollPane.setColumnHeader(null)
jScrollPane.getCorner()       ou jScrollPane.setCorner(string, null)
et jScrollPane.setLayout() ?
Plutôt que de déplacer le curseur, demande le scroll jusqu'à la fin (exemple pour garder un scroll toujours en fin de textPane) :
Code :
pane.scrollRectToVisible(pane.modelToView(pane.getDocument().getLength()));
On demande au JTextComponent de transmettre à son parent les coordonnées d'un point qui doit être visible.
try {
        int longueur = monTextArea.getDocument().getLength();
        Rectangle rectangle = monTextArea.modelToView(longueur);
        monTextArea.scrollRectToVisible(rectangle);
} catch (javax.swing.text.BadLocationException err) {} 

- Pour les comboBoxes, setter une taille minimum, qui est toujours le max entre la taille obtenue et la taille précédente : ou plutôt calculer sa taille
  en fonction des valeurs possibles... Le resize semble être calculé à partir des valeurs du précédent langage... 

- Corriger le sleep en fonction de la fluidité :
  this.intGframesNumberPerThrow  doit être prop à la fluidité : il faut jarter la vitesse !
  this.intGtheoricalMilliSecondsFramesDelay doit être prop à la vitesse : il faut jarter la fluidité !
  C'est pas aussi simple : si je vais lentement avec une fluidité au max, faut pas que ça saccade !
- Tenter de synchroniser le temps pratique sur le temps théorique. Je fais un sleep, ou pas, si j'ai pas dépassé le temps théorique.

- Problème lorsque je minimise plusieurs fois rapidement une frame, je tombe dans une boucle infinie de minimize-restore...
  Ça fait aussi que si je ferme le panel pendant la boucle infinie, la frame, elle, ne se ferme plus !!! Et le CPU est à 100% !
- placer le jugglePanel dans la même frame que le juggleMasterPro, et splitter les 2 panels (JSplitPane) :
  du coup, les lastFocused deviennent obsoletes, de même que tous les problèmes de focus et de fenêtrage !
Listener sur le divider :
BasicSplitPaneDivider divider = ((BasicSplitPaneUI) mySplitPane.getUI()).getDivider();
divider.addComponentListener(new ComponentAdapter(){
public void componentMoved(ComponentEvent e){
//your code
}});
- PARAMETRE EMBEDDED

- Filtres avancés ne marchent pas : synchro avec le ss tel quel : (2×,0)(0,[4×2])*

- Réécrire la syntaxe des styles avec une 4° coordonnée !!! :
  Si je n'ai pas de 4° coordonnée, alors tout est identique à la 3°.
  Le mieux : faire un =3, -3, +3 ou #3. Pour l'invisibilité, unique caractère × (ou x, accepté). Comme ça l'écriture est plus simple !
  Attention à l'écriture, s'il faut ou pas préfixer la cote Z (getZValueString de JuggleTools... compliqué !) -
  À reproduire dans l'infoFrame (faire un fonction de conv de JuggleTools)
  
- Style renommable (genre faire une zone de saisie qui vient se mettre au dessus de la liste, et qui modifie le style partout dans 
  toutes les références de figures)
  
- style défini via un tableau (pop-up modale), de sorte à définir un style perso pour chaque figure (reste à voir l'unicité du nom,
  quoique, il suffirait de permettre de le renommer, ou encore de lui suffixer une étoile dans la liste !). Sinon, à part ça,
  on sauvegarderait les 2 styles (initial et courant, et si courant == null, alors on prend initial). 
  Bouton OK que si le style est OK --> revoir le parseStyle !
  Si style courant.equals(style initial), alors obj style courant = obj style initial.
  Outil d'édition des styles, avec mise en valeur des lances/rattrapes correspondant a la case editee en question.
  Ou alors sinon sélectionner le lancé ou la rattrape correpondante (comment ?), et déplacer le carré vert sur l'écran de droite
  pour modifier le style : de fait, comment le nouveau style est-il enregistré ??? Peut-être sous la forme d'un "<nom> *", mais alors
  comment est-il mémorisé, et est-ce que la modification est locale ou globale (ça va dépendre du paramètre dans le fichier, mais par défaut, je dirais globale) ? 
  Faire un attribut spécial d'un style qui détermine s'il est modifié ou pas (starred), et si c'est le cas, allouer une nouvelle place
  pour la définition de celui-ci dans l'objet JuggleStyle.

- Screenplay : attention si je change de figure ou que je redimensionne la fenêtre, ou si je quitte !

- SmoothWheel : http://today.java.net/article/2007/09/25/fling-scroller

- Lampe de poche dans la nuit : http://download.oracle.com/javase/tutorial/uiswing/misc/jlayer.html

- java version !

- IMPRESSION : Le resizing de l'impression marche mal...
  Rajouter un onglet (ServiceUIFactory) permettant de préciser : 
  - Général : 
    ++ impression de toute la fenêtre ou seulement du cadre de l'animation remplace -- Index des pages
  - Mise en page :
    ++ nombre d'images par page 
    !! repositionner les marges en losange
    ++ position (centre, gche, top, bottom, ...)
    ++ Titre textfield av checkbox, initialisé au nom de la figure ? Où ? N° des images de l'anim ?
  - Apparence :
    ++ bordure autour de la zone imprimée & fréquence de l'animation (comme les flashs) remplace -- attributs de la tâche (mais on affecte des propriétés par défaut)
    ++ fit to page & allow distorsion
    -- Qualité


--------------------------------------------------- OPTIONNEL :

- Section Téléchargements :
  jm103.zip (+jouer, jmp401.zip, licences, répertoires (+ sources)


- BARRE D'ETAT dans la frame,
  avec en plus des raccourcis boutons pour vitesse, fluidité et play/pause (genre miniaturisés) ?
Dans l'ordre : play/pause & vitesse (à gauche) | Appareil photo, caméra (au centre) | Fluidité (à droite) : 3 box identiques, avec des attributs center, left ou right.
classe JuggleStatusBar, qui contient les composants d'engine.component.
__________________________________________________________________________________________________________________________________

FONCTIONNALITES :
_________________

- Prise en compte des formats jap (juggleAnim) et jml (jugglingLab)

- Autres menus d'aide...

- Compléter Licence... Choper une GPL quelque part (e-Mule, ou Sherazaza)

- Changer la console : faire une classe pour ça. Elle s'appelle toujours ainsi, et mémorise toutes les opérations. 
  Inclure donc des "erreurs", indiquant le nom des fichiers chargés avec le type de leur chargement 
  (chargement, import, et de quoi...), de sorte à incorporer les chgts de langue... : Non, ne pas gérer les changements de langue !
  Au besoin faire un tableau pour séparer info, warnings et erreurs (avec une icone devant comme ss FF), mais ne plus gérer la langue...
__________________________________________________________________________________________________________________________________

NOUVELLES IDEES :
_________________

- Repenser aux ascenceurs dynamiques : vitesse, hauteur (ré-initialiser le graphisme, mais pas le compte à rebours),
  % main et fluidité.
- Intérieurs stds passant de 45 à 46% de %main : provoque toujours une déformation du jglr : il y a un écart entre lastCatchTimer, nextCatchTimer et le lngGthrowsCount
  C'est peut-être ça qu'il faudrait corriger ! En fait, lorsque je clique sur la speedScrollBar, les last et next varient d'un coup !
  Et pendant l'instant de déformation, ils ne varient pas (parce qu'ils sont trop grands), alors que le throwsCount avance...

- Permettre l'exécution d'une seule figure en applet, en passant en param le nom du fichier et le nom
  de la figure à partir de l'applet. Attention aux erreurs de lecture dans le fichier dans ce cas : les annuler ! 
  Auquel cas, il faudrait penser à la taille de la zone allouée pour la figure, et tout redimensionner en fonction d'un ratio.
  utiliser drawImage(Image, posx, posy, dx, dy, null) qui permet de faire rentrer l'image dans dx dy ! ca se fait tout seul !

- Renverser correctement la chaine des couleurs.

- % Opacité du jongleur dans les prefs (globales) (scrollbar)

- bouton freeze qui permet de geler le style avec ses défauts, de sorte à l'enregistrer tel quel...

- Régler l'orientation des mains suivant la position de celles-ci par rapport au jongleur
  (de fait, songer à introduire les pingouins, et éventuellement les PdC (et peut-être même les revers) !

- générateur de siteswaps
- éditeur visuel (diagramme d'échelle)
- lien web pour générer automatiquement une figure dans une page internet (applet simplifiée qui n'utilise pas JP)

- Menu contextuel sur la liste des figures : JPopUpMenu
  Simple copie, copie détaillée, valeurs par défaut, recharger le fichier, jouer (par défaut, en gras), importer des figures,
  et quoi d'autre, encore ?
__________________________________________________________________________________________________________________________________

HARMONISATION DU CODE :
_______________________

- Faire une classe <Pacquet>Actions par listener :
data
file
fx
help
motion
pattern
pref
print
siteswap
style
window

- GammaCorrection à activer : s'applique au jongleur aussi (et au siteswap), et au fond d'écran - régler les couleurs des drop-boutons...
  --> Problème du calcul de la couleur avec la correction gamma :
      il faut travailler avec les valeurs sans gamma, le gamma n'étant appliqué que lors de la saisie.
      C'est dans PreferencesJDialog.setPreferenceControlGlobalValue : le stateChanged se fait toujours sur 255, 255, 255 en couleur...
  À checker, mais apparemment tout fonctionne !
  Je clique 153, 153, 0 --> reverse : 69, 69, 0 --> reverse de reverse 152, 152, 114 !
- jarter gamma dans :
control/color/BallColorJButton.java
control/color/ColorChooserDropDownJButton.java
control/color/ColorsStyledDocument.java
control/pref/PreferenceByteGlobalJScrollBar.java
control/pref/PreferenceStringLocalColorJButton.java
control/pref/PreferencesJColorChooser.java
control/pref/PreferencesJDialog.java
engine/window/AnimationJFrame.java
engine/util/NeuralNetworkQuantization.java
engine/JuggleMasterPro.java
pattern/BallsColors.java
user/Preferences.java
user/Language.java
util/Constants.java
util/Tools.java

- Ré-écriture des boucles avec des case à l'intérieur pour ne prendre que ce qui me concerne :
  for (byte bytLindex : new byte[] { valeurs, ... })

- Passer en private toutes les propriétés de type simple (int, bol, chr, ...).
  Idem pour les méthodes
  control
  ball
  color
  criteria
  data
  file
  fx
  help
  motion
  pattern
  pref
  print
  siteswap
  style
  util
  window
  engine
  component
  util
  window
  gear
  pattern
  util
  user
  util

- dans parseSiteswap, utiliser la fonction de parsing Token.

- What about Java Web Start ?
http://perso.wanadoo.fr/jm.doudoux/java/tutorial/chap029.htm
Le grand avantage de Java Web Start est qu'il est inutile de modifier une application
pour qu'elle puisse être déployée avec cette technologie (à condition que les fichiers
contenant des ressources soient accédés en utilisant la méthode getResource() du classloader, donc si LOCAL_APPLICATION,
tenter 2 modes de chargement).

- Empaqueter TOUS les fichiers des figures dans le JAR (et y accéder via le classLoader) - voir du coup les background du A Propos...
Code :
URL url = getClass().getClassLoader().getResource("projet/Images/dessin.png");
Image img = (new ImageIcon(url).getImage();
ou encore mieux :
Image img = ImageIO.read(url);

- Comment charger une ressource présente dans le CLASSPATH (répertoire ou jar) ?
Pour faire cela, il faut utiliser les méthodes getResource et getResourceAsStream de la classe Class.
Le chemin à passer en argument est celui commençant dans le répertoire du CLASSPATH ou a la racine d'un fichier jar.
Attention si le chemin ne commence pas par "/" alors le package courant est ajouté au début du chemin. Exemple:

package com.developpez;
public class Test {
  public Test()   {
    InputStream is1 = getClass().getResourceAsStream("fichier.txt");
    InputStream is2 = getClass().getResourceAsStream("/fichier.txt");
  }
}

JButton = new JButton(new ImageIcon(getClass().getResource("dropdown.gif")));
Dans le code de l'exemple :
is1 sera un InputStream ouvert sur un fichier "com/developpez/fichier.txt",
	 présent dans un des répertoires du CLASSPATH ou dans la même arborescence à partir de la racine d'un fichier jar du CLASSPATH.
is2 sera un InputStream ouvert sur un fichier "fichier.txt" présent directement dans un répertoire du CLASSPATH ou a la racine d'un fichier jar.

- Obfuscateur Java : Retroguard (www.retrologic.com)
